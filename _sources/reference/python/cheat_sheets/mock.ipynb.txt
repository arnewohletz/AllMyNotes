{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# unittest.mock\n",
    "## Basic methods\n",
    "\n",
    "### Create a Mock object"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "95d327f6463954ae"
  },
  {
   "cell_type": "code",
   "source": [
    "from unittest import mock\n",
    "m = mock.Mock()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.082706Z",
     "start_time": "2024-08-16T13:32:27.044745Z"
    }
   },
   "id": "14814ab188445f3",
   "outputs": [],
   "execution_count": 2
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Set a default return value when calling mock object"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "f9524ff595ff2e0f"
  },
  {
   "cell_type": "code",
   "source": [
    "m.return_value = 42\n",
    "m()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.159647Z",
     "start_time": "2024-08-16T13:32:27.139925Z"
    }
   },
   "id": "f7552c846014a6a8",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 3
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Assign different return values for successive calls\n",
    "\n",
    "``side_effect`` must be of type list. Each time the mocked method is then called,\n",
    "the next value in the list is returned. If the ``side_effect`` list has no more\n",
    "values to return, the next call will fail with a ``StopIteration`` error.\n",
    "\n",
    "The ``return_value`` is like a constant side_effect, which always returns the same value."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "a2a67f3504a7e7cf"
  },
  {
   "cell_type": "code",
   "source": [
    "m.side_effect = ['foo', 'bar', 'baz']\n",
    "print(m())\n",
    "print(m())\n",
    "print(m())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.385697Z",
     "start_time": "2024-08-16T13:32:27.372270Z"
    }
   },
   "id": "3b52fbead5a78a8f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "foo\n",
      "bar\n",
      "baz\n"
     ]
    }
   ],
   "execution_count": 4
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Check whether mock object has been called at least once"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "52496c2dbd7d6040"
  },
  {
   "cell_type": "code",
   "source": [
    "m = mock.Mock()\n",
    "m()\n",
    "m.assert_called()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.539316Z",
     "start_time": "2024-08-16T13:32:27.522598Z"
    }
   },
   "id": "3940370ed5ab33c1",
   "outputs": [],
   "execution_count": 5
  },
  {
   "cell_type": "markdown",
   "source": [
    "Returns *None*, if called, otherwise raises *AssertionError*\n",
    "\n",
    "### Check whether mock object has been called exactly once"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "3c9e3f6277db5b71"
  },
  {
   "cell_type": "code",
   "source": [
    "m = mock.Mock()\n",
    "try:\n",
    "    m.assert_called_once()\n",
    "except AssertionError:\n",
    "    print(\"No, I wasn't called (yet)\")\n",
    "m()\n",
    "if not m.assert_called_once():\n",
    "    print(\"Yeah, now I was called\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.569960Z",
     "start_time": "2024-08-16T13:32:27.560006Z"
    }
   },
   "id": "40b4ddc36efb036c",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No, I wasn't called (yet)\n",
      "Yeah, now I was called\n"
     ]
    }
   ],
   "execution_count": 6
  },
  {
   "cell_type": "markdown",
   "source": "### Get number of calls to mock object",
   "metadata": {
    "collapsed": false
   },
   "id": "6b2ec508d9046b42"
  },
  {
   "cell_type": "code",
   "source": [
    "m = mock.Mock()\n",
    "m()\n",
    "m()\n",
    "m.call_count"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.635775Z",
     "start_time": "2024-08-16T13:32:27.624658Z"
    }
   },
   "id": "a82ddaa3883f2e2f",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 7
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Get call arguments of last mock call"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "75cb3d8793e0def1"
  },
  {
   "cell_type": "code",
   "source": [
    "m = mock.Mock()\n",
    "m(1, foo='bar')\n",
    "m.call_args"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.748377Z",
     "start_time": "2024-08-16T13:32:27.736282Z"
    }
   },
   "id": "c83c4b94f4e3c6af",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "call(1, foo='bar')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 8
  },
  {
   "cell_type": "markdown",
   "source": [
    "If mock object hasn't been called yet, *None* is returned.\n",
    "\n",
    "### Get call arguments of all mock calls"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "5f7e1f02c7b6e400"
  },
  {
   "cell_type": "code",
   "source": [
    "m = mock.Mock()\n",
    "m()\n",
    "m(1, foo='bar')\n",
    "m(4, baz='bar2')\n",
    "m.call_args_list"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.821866Z",
     "start_time": "2024-08-16T13:32:27.803698Z"
    }
   },
   "id": "edf79f0b9313803b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[call(), call(1, foo='bar'), call(4, baz='bar2')]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 9
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Reset call previous call (won't change mock configuration)"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "bb569654bcce9cdf"
  },
  {
   "cell_type": "code",
   "source": [
    "m = mock.Mock()\n",
    "m()\n",
    "m(1, foo='bar')\n",
    "m(4, baz='bar2')\n",
    "m.reset_mock()\n",
    "m.call_args_list"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-08-16T13:32:27.888713Z",
     "start_time": "2024-08-16T13:32:27.875650Z"
    }
   },
   "id": "8240bb6e6e870b95",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 10
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "c31e599e4bd4539e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Patching an import module\n",
    "``unittest.mock`` is able to patch imports in the module under test using the\n",
    "[patch](https://docs.python.org/3/library/unittest.mock.html#patch)` function.\n",
    "\n",
    "``patch`` will intercept import statements identified by a string and return\n",
    "a Mock instance you can preconfigure using the techniques from above.\n",
    "\n",
    "Module under test (``work.py``):\n",
    "\n",
    "```python\n",
    "import os\n",
    "\n",
    "def work_on():\n",
    "    path = os.getcwd()\n",
    "    print(f'Working on {path}')\n",
    "    return path\n",
    "```\n",
    "\n",
    "The project module imports ``os`` and uses its ``getcwd()`` method , which\n",
    "we want to mock in our test.\n",
    "\n",
    "### Patch using a context manager (``with`` statement)\n",
    "\n",
    "When using the context manager ``patch``, the patch ends when the ``with`` statement ends.\n",
    "\n",
    "```python\n",
    "from unittest import TestCase, mock\n",
    "from work import work_on\n",
    "\n",
    "class TestWorkMockingModule(TestCase):\n",
    "\n",
    "    def test_using_context_manager(self):\n",
    "        with mock.patch('work.os') as mocked_os:\n",
    "            work_on()\n",
    "            mocked_os.getcwd.assert_called_once()\n",
    "```\n",
    "\n",
    "We specifically patch the ``work.os`` module, not ``os``, as this\n",
    "would patch ``os`` for all modules, not just for ``work.py``.\n",
    "\n",
    "* The test module imports the project module's method ``work_on()``\n",
    "* At the beginning of the test, the ``work.os`` module (which is the ``os``\n",
    "  module in our ``work.py`` module) is patched with a [MagickMock][1] object\n",
    "  (here called ``mocked_os``)\n",
    "* When the ``work_on()`` method is called afterward, that ``MagicMock`` object is\n",
    "  called instead of the original module (``os``) - as no return value is defined\n",
    "  ``work_on()`` returns another MagicMock object - as we are not testing the\n",
    "  correctness of the return value here, only checking if the ``mocked_os`` executed\n",
    "  the ``getcwd()``method, we do not care about the return value\n",
    "\n",
    "The ``as`` statement in the decorator is optional. You may as well not mock the\n",
    "entire ``work.os`` module, but rather define a return value for the single\n",
    "function, that is called (``getcwd()``):\n",
    "\n",
    "```python\n",
    "from unittest import TestCase, mock\n",
    "from work import work_on\n",
    "\n",
    "class TestWorkMockingModule(TestCase):\n",
    "    def test_using_return_value(self):\n",
    "        with mock.patch('work.os.getcwd', return_value='testing'):\n",
    "            assert work_on() == 'testing'\n",
    "```\n",
    "\n",
    "### Patch using the decorator (@patch)\n",
    "Using the ``@patch`` decorator allows to inject a mock into the test function.\n",
    "The patch is available for the entire function.\n",
    "\n",
    "```python\n",
    "from unittest import TestCase, mock\n",
    "\n",
    "from work import work_on\n",
    "\n",
    "class TestWorkMockingModule(TestCase):\n",
    "\n",
    "    @mock.patch('work.os')\n",
    "    def test_using_decorator(self, mocked_os):\n",
    "        work_on()\n",
    "        mocked_os.getcwd.assert_called_once()\n",
    "```\n",
    "\n",
    "Here the ``work.os`` module is replaced with a MagicMock object.\n",
    "\n",
    "[1]: https://docs.python.org/3/library/unittest.mock.html?highlight=magicmock#unittest.mock.MagicMock\n",
    "\n",
    "## Patching classes\n",
    "To test project classes that interact with other project classes in isolation,\n",
    "the other project classes must be mocked (in order to determine test failure\n",
    "to a specific class and method, not by any of its dependency classes).\n",
    "\n",
    "Example:\n",
    "\n",
    "### Project module (worker.py)\n",
    "\n",
    "In this module, the `Worker` class needs to be tested for these two things:\n",
    "\n",
    "- the `Worker` calls `Helper` with `db`\n",
    "- the `Worker` returns the expected path supplied by `Helper `\n",
    "\n",
    "```python\n",
    "import os\n",
    "\n",
    "\n",
    "class Helper:\n",
    "\n",
    "    def __init__(self, path):\n",
    "        self.path = path\n",
    "\n",
    "    def get_path(self):\n",
    "        base_path = os.getcwd()\n",
    "        return os.path.join(base_path, self.path)\n",
    "\n",
    "\n",
    "class Worker:\n",
    "\n",
    "    def __init__(self):\n",
    "        self.helper = Helper('db')\n",
    "\n",
    "    def work(self):\n",
    "        path = self.helper.get_path()\n",
    "        print(f'Working on {path}')\n",
    "        return path\n",
    "```\n",
    "\n",
    "To test this, the `Worker` needs to be isolated from `Helper`,\n",
    "so that failures can be associated with the `Worker` class only.\n",
    "\n",
    "Consequently, the entire `Helper` class must be patched:\n",
    "\n",
    "```python\n",
    "from unittest import TestCase, mock\n",
    "from worker import Worker\n",
    "\n",
    "\n",
    "class TestWorkerModule(TestCase):\n",
    "\n",
    "    def test_patching_class(self):\n",
    "        with mock.patch('worker.Helper') as MockHelper:\n",
    "            MockHelper.return_value.get_path.return_value = 'testing'\n",
    "            worker = Worker()\n",
    "            MockHelper.assert_called_once_with('db')\n",
    "            self.assertEqual(worker.work(), 'testing')\n",
    "```\n",
    "\n",
    "Note the double ``return_value`` in the example, simply using \n",
    "``MockHelper.get_path.return_value`` would not work since in the code\n",
    "we call get_path on an instance, not the class itself.\n",
    "\n",
    "Alternatively, we can preconfigure the ``MockHelper`` instance and\n",
    "assign it as the return value of the ``worker.Helper`` call. Below,\n",
    "shown for both the context manager and the decorator way:\n",
    "\n",
    "```python\n",
    "from unittest import TestCase, mock\n",
    "from worker import Worker\n",
    "\n",
    "\n",
    "class TestWorkerModule(TestCase):\n",
    "\n",
    "    mockHelperInstance = mock.MagicMock()\n",
    "    mockHelperInstance.get_path.return_value = 'testing'\n",
    "\n",
    "    def test_patch_class_context_manager(self):\n",
    "        with mock.patch('worker.Helper',\n",
    "                        return_value=self.mockHelperInstance) as MockHelper:\n",
    "            worker = Worker()\n",
    "            MockHelper.assert_called_once_with('db')\n",
    "            self.assertEqual(worker.work(), 'testing')\n",
    "\n",
    "    @mock.patch('worker.Helper', return_value=mockHelperInstance)\n",
    "    def test_patch_class_decorator(self, mock_helper):\n",
    "        worker = Worker()\n",
    "        mock_helper.assert_called_once_with('db')\n",
    "        self.assertEqual(worker.work(), 'testing')\n",
    "```\n",
    "\n",
    "\n",
    "*NEEDS TO BE CONTINUED...*"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "e29ec97a187f04b8"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
